% \iffalse meta-comment
%
% TUDa-CI -- Corporate Design for TU Darmstadt
% ----------------------------------------------------------------------------
%
%  Copyright (C) 2018--2025 by Marei Peischl <marei@peitex.de>
%
% ============================================================================
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3c
% of this license or (at your option) any later version.
% The latest version of this license is in
% http://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2008/05/04 or later.
%
% This work has the LPPL maintenance status `maintained'.
%
% The Current Maintainers of this work is
%   Marei Peischl <tuda-ci@peitex.de>
%
% The development respository can be found at
% https://github.com/tudace/tuda_latex_templates
% Please use the issue tracker for feedback!
%
% ============================================================================
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{tudacolors.dtx}[2024-07-02 v3.41 Color definition for TU Darmstadt's tuda-ci bundle]
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[2020-10-01]
%<package>\ProvidesExplPackage{tudacolors}{2024-07-02}{3.41}{Color definition for TU Darmstadt's tuda-ci bundle}
%
%<*driver>
\documentclass[
  pdfa=false,
  class=report,
  titlepage=true,
]{tudapub}
\let\tudamaketitle\maketitle% avoid issues due to catcode changes
\usepackage{doc}
\let\maketitle\tudamaketitle% restore
\usepackage{tabularx}
\usepackage{booktabs}
\usepackage{csquotes}
\usepackage{hologo}
\let\file\texttt
\let\code\texttt
\let\tbs\textbackslash
\providecommand\pkg{\textsf}
\let\cls\textsf

\usepackage{xspace}
\AddToHook{cmd/KOMAScript/after}{\xspace}

\providecommand*{\codefamily}{\ttfamily}
\DeclareTextFontCommand{\codefont}{\codefamily}
\ProvideDocElement[idxtype = option, idxgroup = options]{Option}{optionenv}
\makeatletter
\ExplSyntaxOn
\newcommand{\PrintDescribeKeyOption}[1]{\parbox[b]{\linewidth}{\raggedleft\MacroFont #1}\rlap{=}}

\cs_new:Npn \__ptxctools_parse_key_option:w #1 #2  #3 #4 = #5  \q_stop {
	\noindent{\let\PrintDescribeOption\PrintDescribeKeyOption\DescribeOption{#4}}\makebox[\linewidth]{
	\IfBooleanTF{#3}{\textsf{#5}}{\textsf{(#5)}}
	\hfill
		\IfBooleanTF{#1}
			{#2}
			{(default:~\codefont{\detokenize{#2}})}
	}
}

\cs_new:Npn \__ptxctools_parse_key_option_item:w #1 #2  #3 #4 = #5  \q_stop {
	\item[\let\MacroFont\codefamily\DescribeOption{#4=}\IfBooleanTF{#3}{\textsf{#5}}{\textsf{(#5)}}]
	\hfill
		\IfBooleanTF{#1}
			{#2}
			{(default:~\codefont{#2})}\newline
}

\NewDocumentCommand{\DescribeKeyOption}{smms}{
	\__ptxctools_parse_key_option:w  #1 {#3} #4 #2 \q_stop
}

\NewDocumentCommand{\KeyOptionItem}{smms}{
	\__ptxctools_parse_key_option_item:w  #1 {#3} #4 #2 \q_stop
}

% run minted with pygments or not
\sys_if_shell_unrestricted:TF {
	\usepackage{minted}
	\newenvironment{Syntax}{
	  \VerbatimEnvironment
	  \begin{VerbatimOut}[gobble=1, tabsize=4]{minted.doc.out}}
	  {\end{VerbatimOut}
	  \inputminted[autogobble, escapeinside=||,tabsize=4]{latex}{minted.doc.out}
	}
	\newenvironment{example}{
	 \VerbatimEnvironment
	 \begin{VerbatimOut}[gobble=1, tabsize=4]{minted.doc.out}}
	 {\end{VerbatimOut}
	 \inputminted[autogobble, escapeinside=||,tabsize=4]{latex}{minted.doc.out}
	}
} {
	\usepackage[draft]{minted}
	\newcommand \InputEscapedVerbatim [1] {
		\ior_open:Nn \g_ptxcd_ior   {#1}
		\par\smallskip
		\begin{samepage}
			\setlength{\parindent}{\c_zero_dim}
			\ttfamily
			\bool_set_true:N \l_tmpa_bool
			\ior_str_map_variable:NNn \g_ptxcd_ior \l_tmpa_tl {
			\regex_replace_all:NnN \c_ptxtools_escape_verb_regex {\c{ptxtools_escape_verb:w}\1\c{q_ptxtools_stop}} \l_tmpa_tl
			\bool_if:NTF \l_tmpa_bool
				{\bool_set_false:N \l_tmpa_bool}
				{\newline}
			\strut\tl_use:N \l_tmpa_tl
			}
		\end{samepage}
		\par\smallskip
		\ior_close:N  \g_ptxcd_ior
	}

	\ior_new:N \g_ptxcd_ior
	\cs_new:Npn \ptxtools_escape_verb:w #1 \q_ptxtools_stop {
		\tl_rescan:nn {\cctab_select:N \c_document_cctab} {#1}
	}
	\regex_const:Nn \c_ptxtools_escape_verb_regex {\|(.+?)\|}
	% Based on the definition from minted.sty to be able to support escapeinside if pygments cannot be used.
	% Original Version taken from
	% minted.dtx  – Copyright 2013--2022 Geoffrey M. Poore –  Copyright 2010--2011 Konrad Rudolph
	\newenvironment{Syntax}
	  {\VerbatimEnvironment%
	    \let\FVB@VerbatimOut\minted@FVB@VerbatimOut%
	    \let\FVE@VerbatimOut\minted@FVE@VerbatimOut%
	    \minted@configlang{latex}%
	    \setminted{gobble=2}
	    \minted@fvset
	    \begin{VerbatimOut}[codes={\catcode`\^^I=12},firstline,lastline]{\minted@jobname.pyg}}%
	  {\end{VerbatimOut}%
	      \minted@langlinenoson
		\InputEscapedVerbatim{\minted@jobname.pyg}
	    \minted@langlinenosoff}
		\newenvironment{example}
			{\VerbatimEnvironment%
			\let\FVB@VerbatimOut\minted@FVB@VerbatimOut%
			\let\FVE@VerbatimOut\minted@FVE@VerbatimOut%
			\minted@configlang{latex}%
			\setminted{gobble=2}
			\minted@fvset
			\begin{VerbatimOut}[codes={\catcode`\^^I=12},firstline,lastline]{\minted@jobname.pyg}}%
			{\end{VerbatimOut}%
			\minted@langlinenoson
			\InputEscapedVerbatim{\minted@jobname.pyg}
			\minted@langlinenosoff}
}
\setminted{escapeinside=||}

\bool_new:N \l__codedoc_in_implementation_bool
\bool_new:N \g__codedoc_typeset_documentation_bool
\bool_new:N \g__codedoc_typeset_implementation_bool
\bool_set_true:N \g__codedoc_typeset_documentation_bool
\bool_set_true:N \g__codedoc_typeset_implementation_bool
\NewDocumentCommand \EnableDocumentation { }
  { \bool_gset_true:N \g__codedoc_typeset_documentation_bool }
\NewDocumentCommand \EnableImplementation { }
  { \bool_gset_true:N \g__codedoc_typeset_implementation_bool }
\NewDocumentCommand \DisableDocumentation { }
  { \bool_gset_false:N \g__codedoc_typeset_documentation_bool }
\NewDocumentCommand \DisableImplementation { }
  { \bool_gset_false:N \g__codedoc_typeset_implementation_bool }
\NewDocumentEnvironment { documentation } { }
  {
    \bool_if:NTF \g__codedoc_typeset_documentation_bool
      { \bool_set_false:N \l__codedoc_in_implementation_bool }
      { \comment }
  }
  { \bool_if:NF \g__codedoc_typeset_documentation_bool { \endcomment } }
\NewDocumentEnvironment { implementation } { }
  {
    \bool_if:NTF \g__codedoc_typeset_implementation_bool
      { \bool_set_true:N \l__codedoc_in_implementation_bool }
      { \comment }
  }
  { \bool_if:NF \g__codedoc_typeset_implementation_bool { \endcomment } }
\let\saved_macrocode\macrocode
\let\saved_endmacrocode\endmacrocode
\def\macrocode{
\bool_if:NTF \g__codedoc_typeset_implementation_bool
\saved_macrocode
\comment
}
\def\endmacrocode{
\bool_if:NTF \g__codedoc_typeset_implementation_bool
\saved_endmacrocode
\endcomment
}

\geometry{
top=\g_ptxcd_topMargin_dim,
inner=\g_ptxcd_innerMargin_dim,
outer=\dim_eval:n {\g_ptxcd_outerMargin_dim},
bottom=\g_ptxcd_bottomMargin_dim,
columnsep= \g_ptxcd_columnSep_dim,
includehead,
includefoot,
includemp,
nomarginpar,
includemp, marginpar=\g_ptxcd_marginpar_dim, marginparsep=\g_ptxcd_columnSep_dim,
headheight=\g_ptxcd_headheight_dim,
reversemp
}



\ExplSyntaxOff
\newcommand{\docmarginpar}[1]{\frame{#1}}

\makeatother

\providecommand*{\sarg}{\codefont{*}}
\providecommand\marg[1]{%
  {\codefamily\char`\{}\meta{#1}{\codefamily\char`\}}}
\providecommand\oarg[1]{%
  {\codefamily[}\meta{#1}{\codefamily]}}
\providecommand\parg[1]{%
  {\codefamily(}\meta{#1}{\codefamily)}}

\usepackage{minted}

\IfFileExists{tuda_logo.pdf}{}{
  \UseName{keys_set:nn} {ptcd/pub} {logofile=example-image}
}

\usepackage{biblatex}
\addbibresource{DEMO-TUDaBibliography.bib}

\hypersetup{hidelinks}

\usepackage{pifont}% Zapf-Dingbats Symbols
\newcommand*{\FeatureTrue}{\ding{52}}
\newcommand*{\FeatureFalse}{\ding{56}}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\usepackage{verbatim,underscore}
\begin{document}
\changes{4.0}{2024/07/31}{Converted to DTX file}
\DoNotIndex{\newcommand,\newenvironment}
\GetFileInfo{tudacolors.dtx}
\title{The \textsf{tudacolors} package}
\author{Marei Peischl\thanks{Email: \href{mailto:tuda-ci@peitex.de}{tuda-ci@peitex.de}}}
\date{\fileversion~from \filedate}
\maketitle
\DisableImplementation
\EnableDocumentation
\DocInput{tudacolors.dtx}
\MaybeStop{}
\EnableImplementation
\DisableDocumentation
\DocInput{tudacolors.dtx}
\PrintChanges
\PrintIndex
\end{document}
%</driver>
% \fi
%
% \begin{implementation}
% \section{Implementation}
%
% \iffalse
%<*package>
% \fi
%    \begin{macrocode}
\str_if_exist:NF \g_ptxcd_department_str {
	\str_new:N \g_ptxcd_department_str
	\str_gset:Nn \g_ptxcd_department_str {default}
}
\keys_define:nn {ptxcd/colors} {
%    \end{macrocode}
% \end{implementation}
% \begin{documentation}
% \DescribeKeyOption{accent=\meta{color}}{0b}\DescribeOption{accentcolor=}
% \end{documentation}
% \begin{implementation}
% \begin{optionenv}{accent=}
%    \begin{macrocode}
	accent .tl_gset:N = \g_ptxcd_color_accent_tl,
	accent .initial:n = 0b,
	accentcolor .meta:n = {accent =#1},
%    \end{macrocode}
% \end{optionenv}^^A accent
% \end{implementation}
% \begin{documentation}
% \DescribeKeyOption{textaccent=\meta{color}}{\g_ptxcd_color_accent_tl}
% \end{documentation}
% \begin{implementation}
% \begin{optionenv}{textaccent=\meta{color}}
%    \begin{macrocode}
	textaccent .tl_gset:N = \g_ptxcd_color_textaccent_tl,
	textaccent .initial:n = \g_ptxcd_color_accent_tl,
	textaccentcolor .meta:n = {textaccent = #1},
%    \end{macrocode}
% \end{optionenv}^^A textaccent
% \end{implementation}
% \begin{documentation}
% \DescribeKeyOption{identbar=\meta{color}}{\g_ptxcd_color_accent_tl}
% \end{documentation}
% \begin{implementation}
% \begin{optionenv}{identbar=\meta{color}}
%    \begin{macrocode}
	identbar .tl_gset:N = \g_ptxcd_color_identbar_tl,
	identbar .initial:n = \g_ptxcd_color_accent_tl,
	identbarcolor .meta:n = {identbar = #1},
%    \end{macrocode}
% \end{optionenv}^^A identbar
% compatibility only
%    \begin{macrocode}
	color .code:n = {
    \keys_set:nn {ptxcd/colors} {
      accent=#1,
      textaccent=#1,
      identbar=#1
    }
    \PassOptionsToPackage{color=}{siunitx}
  },
%    \end{macrocode}
% \end{implementation}
% \begin{documentation}
% \DescribeKeyOption{text=preferblack/preferwhite}{preferwhite}
% \end{documentation}
% \begin{implementation}
% \begin{optionenv}{text}
%    \begin{macrocode}
	text .choice:,
	text/preferblack .code:n = \bool_gset_false:N \g_ptxcd_color_whitetext_bool,
	text/preferwhite .code:n = \bool_gset_true:N  \g_ptxcd_color_whitetext_bool,
	text .initial:n = {preferwhite},
	text/black .meta:n = {text=preferblack},
	text/white .meta:n = {text=preferwhite},
%    \end{macrocode}
% \end{optionenv}^^A text
% \begin{documentation}
% \DescribeKeyOption{colormode=cmyk/RGB}{Depends on document type}
% \end{documentation}
% \begin{optionenv}{cmyk, RGB}
%    \begin{macrocode}
	cmyk .code:n = \PassOptionsToPackage{cmyk}{xcolor},
	RGB .code:n = \PassOptionsToPackage{RGB}{xcolor},
%    \end{macrocode}
% \end{optionenv}
% \end{implementation}
% \begin{documentation}
% \DescribeKeyOption{department=default/mecheng/\meta{department}}{default}
% Within \pkg{tudacolors} it's only checked if the department was set to \option{mecheng}. In that case the additional color configuration will be enbled (\autoref{sec:mecheng}).
% \end{documentation}
% \begin{implementation}
% \begin{optionenv}{department=}
%    \begin{macrocode}
	department .choice:,
	department / default .code:n = \str_gset:Nn \g_ptxcd_department_str {default},
	department / mecheng .code:n = {
    \str_gset:Nn \g_ptxcd_department_str {mecheng}
    \keys_set:nn {ptxcd/colors}{
      accent=TUDa-2d,
      identbar=TUDa-6b
   },
	department / unknown .code:n = {
		\str_gset:Nx \g_ptxcd_department_str {\l_keys_value_tl}
	},
%    \end{macrocode}
% \end{optionenv}^^A department
% \end{implementation}
% \begin{implementation}
%    \begin{macrocode}
	departmentconfigprefix .tl_gset:N = \g__ptxcd_config_prefix_tl,
	mecheng .meta:n = {department=mecheng},
}
\ProcessKeyOptions[ptxcd/colors]
\RequirePackage{xcolor}
\input{tudacolors.def}
\str_if_eq:VnT \g_ptxcd_department_str {mecheng} {
	\colorlet{TUDa-Primary1}{TUDa-6b}
	\colorlet{TUDa-Primary2}{TUDa-2d}
	\colorlet{TUDa-Secondary1}{TUDa-9a}
	\colorlet{TUDa-Secondary2}{TUDa-8a}
	\colorlet{TUDa-Secondary3}{TUDa-6a}
	\colorlet{TUDa-Secondary4}{TUDa-3a}
	\colorlet{TUDa-Secondary5}{TUDa-4a}
	\colorlet{TUDa-Secondary6}{TUDa-5a}
	\colorlet{TUDa-Arrow}{TUDa-Primary2}
}
\clist_const:Nn \c_ptxcd_color_forbid_textaccent_clist {TUDa-0a,TUDa-5a,TUDa-6a,TUDa-6b,TUDa-7a}
\clist_const:Nn \c_ptxcd_color_allow_blacktext_clist {TUDa-0a,TUDa-0b,TUDa-0c,TUDa-1a,TUDa-2a,TUDa-3a,TUDa-4a,TUDa-4b,TUDa-4c,TUDa-5a,TUDa-5b,TUDa-5c,TUDa-6a,TUDa-6b,TUDa-6c,TUDa-7a,TUDa-7b,TUDa-7c,TUDa-8a,TUDa-8b,TUDa-8c,TUDa-9a,TUDa-9b,TUDa-10a}
\clist_const:Nn \c_ptxcd_color_allow_whitetext_clist {TUDa-0b,TUDa-0c,TUDa-0d,black,TUDa-1a,TUDa-1b,TUDa-1c,TUDa-1d,TUDa-2a,TUDa-2b,TUDa-2c,TUDa-2d,TUDa-3a,TUDa-3b,TUDa-3c,TUDa-3d,TUDa-4b,TUDa-4c,TUDa-4d,TUDa-5b,TUDa-5c,TUDa-5d,TUDa-6c,TUDa-6d,TUDa-7b,TUDa-7c,TUDa-7d,TUDa-8a,TUDa-8b,TUDa-8c,TUDa-8d,TUDa-9a,TUDa-9b,TUDa-9c,TUDa-9d,TUDa-10a,TUDa-10b,TUDa-10c,TUDa-10d,TUDa-11a,TUDa-11b,TUDa-11c,TUDa-11d}
%    \end{macrocode}
% messages
%    \begin{macrocode}
\msg_new:nnnn{tudacolors} {undefined-color} {The~ color~ #1~ you~ selected~ is~ not~ defined.} {See~ the~ tuda-ci~ manual~ for~ a~ list~ of~ available~ colors.}
\msg_new:nnnn{tudacolors} {unselectable-color} {The~ color~ you~ selected~ (#1)~ must~ not~ be~ choosen~ for~ #2.} {See~ the~ Corporate~ Design~ Guideline~ for~ further~ information.}
\hook_new:n {ptxcd/init-colors}
\hook_gput_code:nnn {ptxcd/init-colors} {tudacolors} {
  \clist_map_inline:nn {accent, textaccent, identbar} {
    \cs_if_exist:cF {\string\color@\tl_use:c {g_ptxcd_color_#1_tl}} {
      \cs_if_exist:cT {\string\color@TUDa-\tl_use:c {g_ptxcd_color_#1_tl}} {
        \tl_gset:cx {g_ptxcd_color_#1_tl} {TUDa-\tl_use:c {g_ptxcd_color_#1_tl}}
      }
    }
  }
  \exp_args:Nnx \colorlet{accentcolor}{\g_ptxcd_color_accent_tl}
  \bool_if:NTF \g_ptxcd_color_whitetext_bool {
    \clist_if_in:NVTF \c_ptxcd_color_allow_whitetext_clist \g_ptxcd_color_accent_tl {
      \colorlet{textonaccentcolor}{white}
    } {
      \colorlet{textonaccentcolor}{black}
      \tl_if_in:NnT \g_ptxcd_color_accent_tl {TUDa} {
        \msg_warning:nnxx{tudacolors} {unselectable-color} {white} {textonaccentcolor}
      }
    }
  } {
    \clist_if_in:NVTF \c_ptxcd_color_allow_blacktext_clist \g_ptxcd_color_accent_tl {
      \colorlet{textonaccentcolor}{black}
    } {
      \colorlet{textonaccentcolor}{white}
      \tl_if_in:NnT \g_ptxcd_color_accent_tl {TUDa} {
        \msg_warning:nnxx{tudacolors} {unselectable-color} {black} {textonaccentcolor}
      }
    }
  }
  \colorlet{identbarcolor}{\g_ptxcd_color_identbar_tl}
  \exp_args:NNx \clist_if_in:NnTF \c_ptxcd_color_forbid_textaccent_clist {\g_ptxcd_color_textaccent_tl} {
    \msg_warning:nnxx{tudacolors} {unselectable-color} {\g_ptxcd_color_textaccent_tl} {textaccentcolor}
    \colorlet{textaccentcolor}{black}
  } {
    \colorlet{textaccentcolor}{\g_ptxcd_color_textaccent_tl}
  }
}
\file_if_exist_input:n {\g__ptxcd_config_prefix_tl\g_ptxcd_department_str-colors.def}
\hook_use:n {ptxcd/init-colors}
\colorlet{InfoBox}{white}
%    \end{macrocode}
% \end{implementation}
% \iffalse
%</package>
% \fi
%
% \Finale
\endinput
